---
import Layout from '~/layouts/PageLayout.astro';
import HeroText from '~/components/widgets/HeroText.astro';
import CallToAction from '~/components/widgets/CallToAction.astro';
import { supabase } from '../lib/supabase';

export const prerender = false;

const metadata = {
  title: 'Gallery',
};

// Fetch images from gallery-display table
const { data: galleryImages, error } = await supabase.from('gallery-display').select('image_url, file_name');

if (error) {
  console.error('Error fetching gallery images:', error);
}
---

<Layout metadata={metadata}>
  <!-- HeroText Widget ******************* -->

  <HeroText
    tagline="Gallery"
    title="Explore Our Dazzling Creations"
    subtitle="Discover the visual magic we've crafted for performers around the globe."
  />

  <!-- Display Gallery Images ******************* -->\
  <div class="w-11/12 mx-auto mt-12">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      {
        galleryImages && galleryImages.length > 0 ? (
          galleryImages.map((image, index) => (
            <div
              class="gallery-image opacity-0 transform translate-y-60 transition-all duration-700 ease-in-out"
              data-image-index={index}
              data-image-url={image.image_url}
            >
              <img src={image.image_url} alt={image.file_name} class="w-full h-auto rounded-lg shadow-lg" />
            </div>
          ))
        ) : (
          <p class="text-center text-gray-500">No images are currently on display.</p>
        )
      }
    </div>
  </div>

  <!-- Link to Instagram *********** -->
  <div class="text-center py-20">
    <a
      href="https://www.instagram.com/hotbeamproductions/"
      target="_blank"
      rel="noopener noreferrer"
      class="text-primary-500 hover:underline"
    >
      View more on Instagram
    </a>
  </div>

  <!-- CallToAction Widget *********** -->
  <CallToAction
    actions={[
      {
        variant: 'primary',
        text: 'Free Consultation',
        href: '/contact',
        icon: 'tabler:arrow-right',
      },
    ]}
  >
    <Fragment slot="title">
      <span class="sm:whitespace-nowrap">Want Your Event to Look Like This?</span>
    </Fragment>

    <Fragment slot="subtitle">
      Get your free consultation today! Find out what we can do for your next big event. <br class="hidden md:inline" />
    </Fragment>
  </CallToAction>

  <!-- Modal for Image Carousel ******************* -->
  <div
    id="lightbox-modal"
    class="hidden md:hidden fixed inset-0 bg-black bg-opacity-80 z-50 justify-center items-center"
  >
    <button id="close-btn" class="absolute z-10 top-5 right-5 bg-white text-black py-2 px-4 rounded-full">
      Close
    </button>

    <button id="prev-btn" class="absolute z-10 left-5 bg-white text-black py-2 px-4 rounded-full"> Prev</button>

    <button id="next-btn" class="absolute z-10 right-5 bg-white text-black py-2 px-4 rounded-full"> Next</button>

    <img id="modal-image" src="" class="max-w-full max-h-full object-contain rounded-lg" />
  </div>

  <!-- Client-side script -->
  <script type="module">
    document.addEventListener('DOMContentLoaded', () => {
      const galleryItems = document.querySelectorAll('[data-image-index]');
      const galleryTransitions = document.querySelectorAll('.gallery-image');
      const modal = document.getElementById('lightbox-modal');
      const modalImage = document.getElementById('modal-image');
      let currentImageIndex = 0;
      let galleryImages = [];

      // Populate galleryImages from data attributes
      galleryItems.forEach((item) => {
        galleryImages.push(item.dataset.imageUrl);
      });

      // Open modal and display clicked image
      galleryItems.forEach((item) => {
        item.addEventListener('click', () => {
          currentImageIndex = parseInt(item.dataset.imageIndex, 10);
          openModal(currentImageIndex);
        });
      });

      // Function to open the modal
      function openModal(index) {
        modalImage.src = galleryImages[index];
        modal.classList.remove('md:hidden');
        modal.classList.add('md:flex');
      }

      // Function to close the modal
      document.getElementById('close-btn').addEventListener('click', () => {
        modal.classList.remove('md:flex');
        modal.classList.add('md:hidden');
      });

      // Show next image
      document.getElementById('next-btn').addEventListener('click', () => {
        currentImageIndex = (currentImageIndex + 1) % galleryImages.length;
        modalImage.src = galleryImages[currentImageIndex];
      });

      // Show previous image
      document.getElementById('prev-btn').addEventListener('click', () => {
        currentImageIndex = (currentImageIndex - 1 + galleryImages.length) % galleryImages.length;
        modalImage.src = galleryImages[currentImageIndex];
      });

      // Intersection Observer options
      const options = {
        root: null, // viewport
        threshold: 0.1, // trigger when 10% of the element is visible
      };

      const observer = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            // Add transition classes when image enters the viewport
            entry.target.classList.add('opacity-100');
            entry.target.classList.remove('translate-y-60');
            // Stop observing once it's visible
            observer.unobserve(entry.target);
          }
        });
      }, options);

      // Observe each image for visibility
      galleryTransitions.forEach((image) => {
        observer.observe(image);
      });
    });
  </script>
</Layout>
